<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.scau.tss.dao.EmergencyMapper" >
  <resultMap id="BaseResultMap" type="com.scau.tss.entity.Emergency" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="release_time" property="releaseTime" jdbcType="DATE" />
    <result column="context" property="context" jdbcType="VARCHAR" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="dead_line" property="deadLine" jdbcType="DATE" />
    <result column="releaser_id" property="releaserId" jdbcType="INTEGER" />
    <result column="types" property="types" jdbcType="VARCHAR" />
    <result column="examine_id" property="examineId" jdbcType="INTEGER" />
    <result column="deleted" property="deleted" jdbcType="TINYINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, release_time, context, title, dead_line, releaser_id, types, examine_id, deleted
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.scau.tss.entity.EmergencyExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from emergency
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from emergency
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from emergency
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.scau.tss.entity.EmergencyExample" >
    delete from emergency
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.scau.tss.entity.Emergency" >
    insert into emergency (id, release_time, context, 
      title, dead_line, releaser_id, 
      types, examine_id, deleted
      )
    values (#{id,jdbcType=INTEGER}, #{releaseTime,jdbcType=DATE}, #{context,jdbcType=VARCHAR}, 
      #{title,jdbcType=VARCHAR}, #{deadLine,jdbcType=DATE}, #{releaserId,jdbcType=INTEGER}, 
      #{types,jdbcType=VARCHAR}, #{examineId,jdbcType=INTEGER}, #{deleted,jdbcType=TINYINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.scau.tss.entity.Emergency" >
    insert into emergency
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="releaseTime != null" >
        release_time,
      </if>
      <if test="context != null" >
        context,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="deadLine != null" >
        dead_line,
      </if>
      <if test="releaserId != null" >
        releaser_id,
      </if>
      <if test="types != null" >
        types,
      </if>
      <if test="examineId != null" >
        examine_id,
      </if>
      <if test="deleted != null" >
        deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="releaseTime != null" >
        #{releaseTime,jdbcType=DATE},
      </if>
      <if test="context != null" >
        #{context,jdbcType=VARCHAR},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="deadLine != null" >
        #{deadLine,jdbcType=DATE},
      </if>
      <if test="releaserId != null" >
        #{releaserId,jdbcType=INTEGER},
      </if>
      <if test="types != null" >
        #{types,jdbcType=VARCHAR},
      </if>
      <if test="examineId != null" >
        #{examineId,jdbcType=INTEGER},
      </if>
      <if test="deleted != null" >
        #{deleted,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.scau.tss.entity.EmergencyExample" resultType="java.lang.Integer" >
    select count(*) from emergency
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update emergency
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.releaseTime != null" >
        release_time = #{record.releaseTime,jdbcType=DATE},
      </if>
      <if test="record.context != null" >
        context = #{record.context,jdbcType=VARCHAR},
      </if>
      <if test="record.title != null" >
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.deadLine != null" >
        dead_line = #{record.deadLine,jdbcType=DATE},
      </if>
      <if test="record.releaserId != null" >
        releaser_id = #{record.releaserId,jdbcType=INTEGER},
      </if>
      <if test="record.types != null" >
        types = #{record.types,jdbcType=VARCHAR},
      </if>
      <if test="record.examineId != null" >
        examine_id = #{record.examineId,jdbcType=INTEGER},
      </if>
      <if test="record.deleted != null" >
        deleted = #{record.deleted,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update emergency
    set id = #{record.id,jdbcType=INTEGER},
      release_time = #{record.releaseTime,jdbcType=DATE},
      context = #{record.context,jdbcType=VARCHAR},
      title = #{record.title,jdbcType=VARCHAR},
      dead_line = #{record.deadLine,jdbcType=DATE},
      releaser_id = #{record.releaserId,jdbcType=INTEGER},
      types = #{record.types,jdbcType=VARCHAR},
      examine_id = #{record.examineId,jdbcType=INTEGER},
      deleted = #{record.deleted,jdbcType=TINYINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.scau.tss.entity.Emergency" >
    update emergency
    <set >
      <if test="releaseTime != null" >
        release_time = #{releaseTime,jdbcType=DATE},
      </if>
      <if test="context != null" >
        context = #{context,jdbcType=VARCHAR},
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="deadLine != null" >
        dead_line = #{deadLine,jdbcType=DATE},
      </if>
      <if test="releaserId != null" >
        releaser_id = #{releaserId,jdbcType=INTEGER},
      </if>
      <if test="types != null" >
        types = #{types,jdbcType=VARCHAR},
      </if>
      <if test="examineId != null" >
        examine_id = #{examineId,jdbcType=INTEGER},
      </if>
      <if test="deleted != null" >
        deleted = #{deleted,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.scau.tss.entity.Emergency" >
    update emergency
    set release_time = #{releaseTime,jdbcType=DATE},
      context = #{context,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      dead_line = #{deadLine,jdbcType=DATE},
      releaser_id = #{releaserId,jdbcType=INTEGER},
      types = #{types,jdbcType=VARCHAR},
      examine_id = #{examineId,jdbcType=INTEGER},
      deleted = #{deleted,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="emergencyCount" resultType="java.lang.Integer">
select count(id) from emergency
</select>
<select id="getList" parameterType="java.lang.Integer" resultType="com.scau.tss.entity.Emergency">
select id,context from emergency limit #{start},#{size} 
</select>
</mapper>